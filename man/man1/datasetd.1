.\" Automatically generated by Pandoc 3.1.4
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "datasetd (1) user manual | verion 2.1.3 {release_hash}\[rq]" "" "{release_date}" "" ""
.hy
.SH NAME
.PP
datasetd
.SH SYNOPSIS
.PP
datasetd OPTIONS SETTINGS_JSON_FILE
.SH DESCRIPTION
.PP
Runs a web service for one or more dataset collections.
Requires the collections to exist (e.g.\ created previously with the
dataset cli).
It requires a settings JSON file that decribes the web service
configuration and permissions per collection that are available via the
web service.
.SH OPTIONS
.TP
-help
display detailed help
.TP
-license
display license
.TP
-version
display version
.SH EXAMPLES
.PP
Starting up the web service
.IP
.nf
\f[C]
   datasetd settings.json
\f[R]
.fi
.PP
In this example we cover a short life cycle of a collection called
\[lq]t1.ds\[rq].
We need to create a \[lq]settings.json\[rq] file and an empty dataset
collection.
Once ready you can run the datasetd service to interact with the
collection via cURL.
.PP
To create the dataset collection we use the \[lq]dataset\[rq] command
and the \[lq]vi\[rq] text edit (use can use your favorite text editor
instead of vi).
.IP
.nf
\f[C]
    dataset init t1.ds
    vi settings.json
\f[R]
.fi
.PP
In the \[lq]setttings.json\[rq] file the JSON should look like.
.IP
.nf
\f[C]
    {
        \[dq]host\[dq]: \[dq]localhost:8485\[dq],
        \[dq]sql_type\[dq]: \[dq]mysql\[dq],
        \[dq]dsn\[dq]: \[dq]DB_USER:DB_PASSWORD\[at]/DB_NAME\[dq]
    }
\f[R]
.fi
.PP
Now we can run datasetd and make the dataset collection available via
HTTP.
.IP
.nf
\f[C]
    datasetd settings.json
\f[R]
.fi
.PP
You should now see the start up message and any log information display
to the console.
You should open a new shell sessions and try the following.
.PP
We can now use cURL to post the document to the \[lq]/t1/create/one\[rq]
end point.
.IP
.nf
\f[C]
    curl -X POST http://localhost:8485/t1/create/one \[rs]
        -d \[aq]{\[dq]one\[dq]: 1}\[aq]
\f[R]
.fi
.PP
Now we can list the keys available in our collection.
.IP
.nf
\f[C]
    curl http://localhost:8485/t1/keys
\f[R]
.fi
.PP
We should see \[lq]one\[rq] in the response.
If so we can try reading it.
.IP
.nf
\f[C]
    curl http://localhost:8485/t1/read/one
\f[R]
.fi
.PP
That should display our JSON document.
Let\[cq]s try updating (replacing) it.
.IP
.nf
\f[C]
    curl -X POST http://localhost:8485/t1/update/one \[rs]
        -d \[aq]{\[dq]one\[dq]: 1, \[dq]two\[dq]: 2}\[aq]
\f[R]
.fi
.PP
If you read it back you should see the updated record.
Now lets try deleting it.
.IP
.nf
\f[C]
    curl http://localhost:8485/t1/delete/one
\f[R]
.fi
.PP
List the keys and you should see that \[lq]one\[rq] is not longer there.
.IP
.nf
\f[C]
    curl http://localhost:8485/t1/keys
\f[R]
.fi
.PP
In the shell session where datasetd is running press \[lq]ctr-C\[rq] to
terminate the service.
.PP
datasetd 2.1.3
.SH AUTHORS
R. S. Doiel.
