.\" Automatically generated by Pandoc 3.0
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "libdataset (3) user manual" "" "" "" ""
.hy
.SH NAME
.PP
libdataset
.SH SYNOPSIS
.PP
Use via C.
.IP
.nf
\f[C]
include \[dq]libdataset.h\[dq]
\f[R]
.fi
.PP
Use via Python.
.IP
.nf
\f[C]
from py_dataset import dataset
\f[R]
.fi
.SH DESCRIPTION
.PP
libdataset is a C shared library based on the Go package called dataset
from Caltech Library.
The dataset package provides a unified way of working with JSON
documents as collections.
libdataset was create better integrate working with dataset collection
from Python via the py_dataset (https://pypi.org/project/py-dataset/)
Python package.
.SH METHODS
.PP
The following are the exported C methods available in the C-shared
library generated from \f[V]libdataset.go\f[R].
.SS error_clear
.PP
error_clear will set the global error state to nil.
.SS error_message
.PP
error_message returns an error message previously recorded or an empty
string if no errors recorded
.SS use_strict_dotpath
.PP
use_strict_dotpath sets the library option value for enforcing strict
dotpaths.
1 is true, any other value is false.
.SS is_verbose
.PP
is_verbose returns the library options\[cq] verbose value.
.SS verbose_on
.PP
verbose_on set library verbose to true
.SS verbose_off
.PP
verbose_off set library verbose to false
.SS dataset_version
.PP
dataset_version returns the version of libdataset.
.SS init_collection
.PP
init_collection intializes a collection and records as much metadata as
it can from the execution environment (e.g.\ username, datetime
created).
NOTE: New parameter required, storageType.
This can be either \[lq]pairtree\[rq] or \[lq]sqlstore\[rq].
.SS is_collection_open
.PP
is_collection_open returns true (i.e.\ one) if a collection has been
opened by libdataset, false (i.e.\ zero) otherwise
.SS open_collection
.PP
open_collection returns 0 on successfully opening a collection 1
otherwise.
Sets error messages if needed.
.SS collections
.PP
collections returns a JSON list of collection names that are open
otherwise an empty list.
.SS close_collection
.PP
close_collection closes a collection previously opened.
.SS close_all_collections
.PP
close_all_collections closes all collections previously opened
.SS collection_exists
.PP
collection_exits checks to see if a collection exists or not.
.SS check_collection
.PP
check_collection runs the analyzer over a collection and looks for
problem records.
.SS repair_collection
.PP
repair_collection runs the analyzer over a collection and repairs JSON
objects and attachment discovered having a problem.
Also is useful for upgrading a collection between dataset releases.
.SS clone_collection
.PP
clone_collection takes a collection name, a JSON array of keys and
creates a new collection with a new name based on the origin\[cq]s
collections\[cq] objects.
NOTE: If you are using pairtree dsn can be an empty string otherwise it
needs to be a dsn to connect to the SQL store.
.SS clone_sample
.PP
clone_sample is like clone both generates a sample or test and training
set of sampled of the cloned collection.
NOTE: The training name and testing name are followed by their own dsn
values.
If the dsn is an empty string then a pairtree store is assumed.
.SH import_csv
.PP
import_csv - import a CSV file into a collection
.PP
Syntax: COLLECTION CSV_FILENAME ID_COL
.PP
Options that should support sensible defaults:
.IP \[bu] 2
cUseHeaderRow
.IP \[bu] 2
cOverwrite
.SS export_csv
.PP
export_csv - export collection objects to a CSV file
.PP
Syntax: COLLECTION FRAME CSV_FILENAME
.SS sync_send_csv
.PP
sync_send_csv - synchronize a frame sending data to a CSV file returns 1
(True) on success, 0 (False) otherwise.
.SS sync_recieve_csv
.PP
sync_recieve_csv - synchronize a frame recieving data from a CSV file
returns 1 (True) on success, 0 (False) otherwise.
.SS has_key
.PP
has_key returns 1 if the key exists in collection or 0 if not.
.SS keys
.PP
keys returns JSON source of an array of keys from the collection
.SS create_object
.PP
create_object takes JSON source and adds it to the collection with the
provided key.
.SS read_object
.PP
read_object takes a key and returns JSON source of the record
.SS update_object
.PP
update_object takes a key and JSON source and replaces the record in the
collection.
.SS delete_object
.PP
delete_object takes a key and removes a record from the collection
.SS join_objects
.PP
join_objects takes a collection name, a key, and merges JSON source with
an existing JSON record.
If overwrite is 1 it overwrites and replaces common values, if not 1 it
only adds missing attributes.
.SS count_objects
.PP
count_objects returns the number of objects (records) in a collection.
if an error is encounter a -1 is returned.
.SS object_path
.PP
object_path returns the path on disc to an JSON object document in the
collection.
.SS create_objects
.PP
create_objects - is a function to creates empty a objects in batch.
It requires a JSON list of keys to create.
For each key present an attempt is made to create a new empty object
based on the JSON provided (e.g.\ \f[V]{}\f[R],
\f[V]{\[dq]is_empty\[dq]: true}\f[R]).
The reason to do this is that it means the collection.json file is
updated once for the whole call and that the keys are now reserved to be
updated separately.
Returns 1 on success, 0 if errors encountered.
.SS update_objects
.PP
update_objects - is a function to update objects in batch.
It requires a JSON array of keys and a JSON array of matching objects.
The list of keys and objects are processed together with calls to update
individual records.
Returns 1 on success, 0 on error.
.SS list_objects
.PP
list_objects returns JSON array of objects in a collections based on a
JSON array of keys.
.SS attach
.PP
attach will attach a file to a JSON object in a collection.
It takes a semver string (e.g.\ v0.0.1) and associates that with where
it stores the file.
If semver is v0.0.0 it is considered unversioned, if v0.0.1 or larger it
is considered versioned.
.SS attachments
.PP
attachments returns a list of attachments and their size in associated
with a JSON obejct in the collection.
.SS detach
.PP
detach exports the file associated with the semver from the JSON object
in the collection.
The file remains \[lq]attached\[rq].
.SS prune
.PP
prune removes an attachment by semver from a JSON object in the
collection.
This is destructive, the file is removed from disc.
.SS frame
.PP
frame retrieves a frame including its metadata.
NOTE: if you just want the object list, use frame_objects().
.SS has_frame
.PP
has_frame returns 1 (true) if frame name exists in collection, 0 (false)
otherwise
.SS frame_keys
.PP
frame_keys takes a collection name and frame name and returns a list of
keys from the frame or an empty list.
The list is expressed as a JSON source.
.SS frame_create
.PP
frame_create defines a new frame an populates it.
.SS frame_objects
.PP
frame_objects retrieves a JSON source list of objects from a frame.
.SS frame_refresh
.PP
frame_refresh refresh the contents of the frame using the existing keys
associated with the frame and the current state of the collection.
NOTE: If a key is missing in the collection then the key and object is
removed.
.SS frame_reframe
.PP
frame_reframe will change the key and object list in a frame based on
the key list provided and the current state of the collection.
.SS frame_clear
.PP
frame_clear will clear the object list and keys associated with a frame.
.SS frame_delete
.PP
frame_delete will removes a frame from a collection
.SS frame_names
.PP
frame_names returns a JSON array of frames names in the collection.
.SS frame_grid
.PP
frame_grid takes a frames object list and returns a grid (2D JSON array)
representation of the object list.
If the \[lq]header row\[rq] value is 1 a header row of labels is
included, otherwise it is only the values of returned in the grid.
.SS get_versioning
.PP
get_version will get the dataset \[lq]versioning\[rq] setting.
.SS set_versioning
.PP
This will setting the versioning on a collection.
The settings can be \[lq]\[lq],\[rq]none\[rq], \[lq]patch\[rq],
\[lq]minor\[rq], \[lq]major\[rq].
.SH AUTHORS
R. S. Doiel.
